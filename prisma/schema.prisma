// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  lastLogin     String     @default("")
  loginLocation String     @default("")
  Profiles      Profiles[] @relation(name: "ProfilesToUser")
}

model Profiles {
  id     String @id @default(uuid())
  name   String @unique
  user   User   @relation(name: "ProfilesToUser", fields: [userId], references: [id])
  userId String
}

model Brand {
  id       String    @id @default(uuid())
  name     String
  files    Files     @relation(name: "BrandToFiles", fields: [fileId], references: [id])
  fileId   String
  IsActive Boolean   @default(true)
  Product  Product[] @relation(name: "BrandToProduct")
}

model Files {
  id           String         @id @default(uuid())
  Brand        Brand[]        @relation(name: "BrandToFiles")
  name         String
  size         String         @default("")
  ext          String         @default("")
  destination  String         @default("")
  Category     Category[]     @relation(name: "CategoryToFiles")
  SubCategory  SubCategory[]  @relation(name: "FilesToSubCategory")
  ProductFiles ProductFiles[] @relation(name: "FilesToProductFiles")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  description String        @default("")
  file        Files         @relation(name: "CategoryToFiles", fields: [fileId], references: [id])
  fileId      String
  SubCategory SubCategory[] @relation(name: "CategoryToSubCategory")
  Product     Product[]     @relation(name: "CategoryToProduct")
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  description String
  file        Files     @relation(name: "FilesToSubCategory", fields: [fileId], references: [id])
  fileId      String
  category    Category  @relation(name: "CategoryToSubCategory", fields: [categoryId], references: [id])
  categoryId  String
  Product     Product[] @relation(name: "ProductToSubCategory")
}

model Tag {
  id   String @id @default(uuid())
  name String
  link String @default("")
}

model Product {
  id             String         @id @default(uuid())
  name           String         @default("")
  part_no        String         @default("")
  description    String         @default("")
  Quantity       Int            @default(0)
  ProductFiles   ProductFiles[] @relation(name: "ProductToProductFiles")
  brand          Brand          @relation(name: "BrandToProduct", fields: [brand_id], references: [id])
  brand_id       String
  subCategory    SubCategory    @relation(name: "ProductToSubCategory", fields: [subCategory_id], references: [id])
  subCategory_id String
  category       Category       @relation(name: "CategoryToProduct", fields: [category_id], references: [id])
  category_id    String
  ProductGroup   ProductGroup[] @relation(name: "ProductToProductGroup")
  QouteProduct   QouteProduct[] @relation(name: "ProductToQouteProduct")
}

model ProductFiles {
  id         String  @id @default(uuid())
  product    Product @relation(name: "ProductToProductFiles", fields: [product_id], references: [id])
  product_id String
  file       Files   @relation(name: "FilesToProductFiles", fields: [file_id], references: [id])
  file_id    String
}

model Group {
  id           String         @id @default(uuid())
  ProductGroup ProductGroup[] @relation(name: "GroupToProductGroup")
  name         String
}

model ProductGroup {
  id         String  @id @default(uuid())
  group      Group   @relation(name: "GroupToProductGroup", fields: [group_id], references: [id])
  group_id   String
  product    Product @relation(name: "ProductToProductGroup", fields: [product_id], references: [id])
  product_id String
}

model Qoute {
  id           String         @id @default(uuid())
  name         String
  email        String
  phone        String
  message      String
  QouteProduct QouteProduct[] @relation(name: "QouteToQouteProduct")
}

model QouteProduct {
  id         String  @id @default(uuid())
  qoute      Qoute   @relation(name: "QouteToQouteProduct", fields: [qoute_id], references: [id])
  qoute_id   String
  product_id String
  product    Product @relation(name: "ProductToQouteProduct", fields: [product_id], references: [id])
}
